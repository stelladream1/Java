import java.io.*;
import java.util.Arrays;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {

    public static void swap(char[][] array, int i, int j, int k, int l) {
        char temp = array[i][j];
        array[i][j] = array[k][l];
        array[k][l] = temp;

    }

    public static int maxCount(char[][] array) {

        int count = 1;
        int n = array.length;

        int maxLen = 0;

        for(int i =0; i<n; i++){



            for(int j=0; j<n; j++ ){

                    if(j+1 <n  && array[i][j] == array[i][j+1]){
                        count = count + 1;
                    }
                    else{

                        count = 1;
                    }
                    maxLen = Math.max(count, maxLen);
            }
            count = 1;

            for (int j = 0; j < n; j++) {

                    if (j+1 <n  && array[j][i] == array[j + 1][i]) {
                        count = count + 1;
                    } else {

                        count = 1;
                    }
                    maxLen = Math.max(count, maxLen);
            }
        }
        return maxLen;
    }


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int maxValue = 0;
        char[][] array = new char[n][n];
        for (int i = 0; i < n; i++) {
            array[i] = br.readLine().toCharArray();
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {

                if (j + 1 < n) {
                    swap(array, i, j, i, j + 1);
                    maxValue = Math.max(maxValue, maxCount(array));
                    swap(array, i, j, i, j + 1);
                }

                if (i + 1 < n) {
                    swap(array, i, j, i + 1, j);
                    maxValue = Math.max(maxValue, maxCount(array));
                    swap(array, i, j, i + 1, j);
                }
            }
        }
        System.out.println(maxValue);

    }
}
